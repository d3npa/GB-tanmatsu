#!/usr/bin/env python2
# -*- coding: utf-8 -*-

# dumped from Pocket Monsters - Crystal Version (Japan)
string = """

1818181808081010000000000000000000000000000000007E7E00000000000030306868686832325A5ACCCC7A7A0000
"""[1:-1].replace("\n", "")
palette = """
空 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ( ) : ; [ ] a b c d e f g h i j k l m n o p q r s t u v w x y z 
ア イ ウ エ オ カ キ ク ケ コ サ シ ス セ ソ タ チ ツ テ ト ナ ニ ヌ ネ ノ ハ ヒ フ ホ マ ミ ム メ モ ヤ ユ ヨ ラ ル レ ロ ワ ヲ ン ッ ャ ュ ョ ィ 
あ い う え お か き く け こ さ し す せ そ た ち つ て と な に ぬ ね の は ひ ふ へ ほ ま み む め も や ゆ よ ら り る れ ろ わ を ん っ ゃ ゅ ょ ー 
゜ ゛ ？ ！ 。 ァ ゥ ェ ▷ ▶ 下 男 円 ｘ . / ォ 女 0 1 2 3 4 5 6 7 8 9 ' - &
"""[1:-1].replace("\n", "").split(" ")
order = """
空 a b c d e f g h i j k l m n o p q r s t u v w x y z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 2 3 4 5 6 7 8 9 0 
あ い う え お か き く け こ た ち つ て と さ し す せ そ ま み む め も な に ぬ ね の は ひ ふ へ ほ ら り る れ ろ や ゆ よ わ ゐ ゑ を ん っ ゃ ゅ ょ 
ア イ ウ エ オ カ キ ク ケ コ タ チ ツ テ ト サ シ ス セ ソ マ ミ ム メ モ ナ ニ ヌ ネ ノ ハ ヒ フ ヘ ホ ラ リ ル レ ロ ヤ ユ ヨ ワ ヰ ヱ ヲ ン ッ ャ ュ ョ ァ ィ ゥ ェ ォ 
　 ー ゛ ゜ ？ ！ 。 . / 円 ▷ ▶ 下 男 女 円 ｘ ' - & ( ) [ ] : ;
"""[1:-1].replace("\n", "").split(" ")
# print order

data = ""
offset = 0
while offset < len(string):
    data += (string[offset] + string[offset+1]).decode("hex")
    offset += 2

index = 0
offset = 0
output = []
# orderに従ってoutputを生成します
while offset < len(data):
    tile = data[offset:offset+16]
    offset += 16
    db = "\tdb\t"
    for byte in tile:
        db += "$" + byte.encode("hex") + ", "
    index += 1
    character = palette[index-1]
    if character in order:
        output.append(db[:-2] + " ; $" + hex(order.index(palette[index-1]))[2:].zfill(2).upper() + " | " + palette[index-1] + "\n")
    # output += db[:-2] + " ; $" + hex(order.index(palette[index-1]))[2:].zfill(2).upper() + " | " + palette[index-1] + "\n"
output = sorted(output, key=lambda line: int(line[86:88], 16))

# dataには無かった文字をゼロ化する
for index in range(len(order)):
    character = order[index]
    line_character = output[index].split(" | ")[1][:-1]
    if character != line_character:
        unknown_character = "\tdb\t$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; $"
        unknown_character += hex(index)[2:].zfill(2).upper() + " | " + character + "\n"
        output.insert(index, unknown_character)

for line in output:
    print line.replace("\tdb\t", "    db  "),
